# Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved
import math
import fvcore.nn.weight_init as weight_init
import torch
import torch.nn.functional as F
from torch import nn

from detectron2.layers import Conv2d, ShapeSpec, get_norm
from .rnns import hConvGRUCell, tdConvGRUCell , RBPFun, CBP_penalty
from .backbone import Backbone
from .build import BACKBONE_REGISTRY
from .resnet import build_resnet_backbone
from .gn import build_resnet_gn_backbone
from .gnbn import build_resnet_gnbn_backbone
from .gnbn_lowlevel import build_resnet_gnbn_lowlevel_backbone


__all__ = [
    "build_resnet_fpngn_backbone",
    "build_resnet_fpngn_gala_backbone",
    "build_resnet_fpngn_cbp10_backbone",
    "build_resnet_fpn_gn_backbone",
    "build_resnet_fpn_gnbn_backbone",
    "build_resnet_fpn_gnbn_lowlevel_backbone",
    "build_retinanet_resnet_fpn_backbone",
    "FPNGN",
    "FPNGNFULL",
    "FPN"]


class FPNINDI(Backbone):
    """
    This module implements Feature Pyramid Network.
    It creates pyramid features built on top of some input feature maps.
    """

    def __init__(
            self,
            bottom_up,
            in_features,
            out_channels,
            norm="",
            gala=False,
            top_block=None,
            fuse_type="sum",
            grad_method='bptt',
            neumann_iterations=15,
            memory_mode=False,
            timesteps=3):
        """
        Args:
            bottom_up (Backbone): module representing the bottom up subnetwork.
                Must be a subclass of :class:`Backbone`. The multi-scale feature
                maps generated by the bottom up network, and listed in `in_features`,
                are used to generate FPN levels.
            in_features (list[str]): names of the input feature maps coming
                from the backbone to which FPN is attached. For example, if the
                backbone produces ["res2", "res3", "res4"], any *contiguous* sublist
                of these may be used; order must be from high to low resolution.
            out_channels (int): number of channels in the output feature maps.
            norm (str): the normalization to use.
            top_block (nn.Module or None): if provided, an extra operation will
                be performed on the output of the last (smallest resolution)
                FPN output, and the result will extend the result list. The top_block
                further downsamples the feature map. It must have an attribute
                "num_levels", meaning the number of extra FPN levels added by
                this block, and "in_feature", which is a string representing
                its input feature (e.g., p5).
            fuse_type (str): types for fusing the top down features and the lateral
                ones. It can be "sum" (default), which sums up element-wise; or "avg",
                which takes the element-wise mean of the two.
        """
        super(FPNINDI, self).__init__()
        assert isinstance(bottom_up, Backbone)

        # Feature map strides and channels from
        # the bottom up network (e.g. ResNet)
        self.grad_method = grad_method.lower()
        self.timesteps = timesteps
        self.neumann_iterations = neumann_iterations
        self.gala = gala
        self.memory_mode = memory_mode
        input_shapes = bottom_up.output_shape()
        in_strides = [input_shapes[f].stride for f in in_features]
        in_channels = [input_shapes[f].channels for f in in_features]

        _assert_strides_are_log2_contiguous(in_strides)
        lateral_convs = []
        output_convs = []
        td_convs = []
        td_mapping = []
        horizontal_names = []
        stages = []

        use_bias = norm == ""
        for idx, it_in_channels in enumerate(in_channels):
            lateral_norm = get_norm(norm, out_channels)
            output_norm = get_norm(norm, out_channels)

            # Feedforward connections
            lateral_conv = Conv2d(
                it_in_channels,
                out_channels,
                kernel_size=1,
                bias=use_bias,
                norm=lateral_norm
            )
            weight_init.c2_xavier_fill(lateral_conv)
            # Horizontal connections
            output_conv = hConvGRUCell(
                input_size=out_channels,
                hidden_size=out_channels,
                kernel_size=3,
                batchnorm=True,
                timesteps=timesteps,
                gala=self.gala,
                norm=norm,
                grad_method=self.grad_method)
            stage = int(math.log2(in_strides[idx]))
            stages += [stage]
            self.add_module("fpn_lateral{}".format(stage), lateral_conv)
            self.add_module("fpn_output{}".format(stage), output_conv)
            lateral_convs.append(lateral_conv)
            output_convs.append(output_conv)
            horizontal_names.append("fpn_lateral{}".format(stage))

            # TD connections
            if idx < (len(in_channels) - 1):
                # Treat idx as the higher layer. Mapping is high -> low.
                td_conv = tdConvGRUCell(
                    fan_in=out_channels,
                    td_fan_in=out_channels,
                    diff_fan_in=out_channels,
                    kernel_size=3,
                    batchnorm=True,
                    timesteps=timesteps,
                    norm=norm,
                    grad_method=self.grad_method)
            else:
                td_conv = Conv2d(
                    out_channels,
                    out_channels,
                    kernel_size=3,
                    stride=1,
                    padding=1,
                    bias=use_bias,
                    norm=output_norm)
                weight_init.c2_xavier_fill(td_conv)
            self.add_module("fpn_topdown{}".format(stage), td_conv)
            td_convs.append(td_conv)
            td_mapping += [[stage, int(math.log2(in_strides[idx - 1]))]]

        # Place convs into top-down order (from low to high resolution)
        # to make the top-down computation in forward clearer.
        self.lateral_convs = lateral_convs[::-1]
        self.output_convs = output_convs[::-1]
        self.td_convs = td_convs[::-1]
        self.horizontal_names = horizontal_names[::-1]
        self.td_mapping = td_mapping[::-1]
        self.stages = stages[::-1]
        self.top_block = top_block
        self.in_features = in_features
        self.bottom_up = bottom_up
        # Return feature names are "p<stage>", like ["p2", "p3", ..., "p6"]
        self._out_feature_strides = {
            "p{}".format(int(math.log2(s))): s for s in in_strides}
        # top block output feature maps.
        if self.top_block is not None:
            for s in range(stage, stage + self.top_block.num_levels):
                self._out_feature_strides["p{}".format(s + 1)] = 2 ** (s + 1)

        self._out_features = list(self._out_feature_strides.keys())
        self._out_feature_channels = {
            k: out_channels for k in self._out_features}
        self._size_divisibility = in_strides[-1]
        assert fuse_type in {"avg", "sum"}
        self._fuse_type = fuse_type

    @property
    def size_divisibility(self):
        return self._size_divisibility

    def forward(self, x):
        """
        Args:
            input (dict[str->Tensor]): mapping feature map name (e.g., "res5") to
                feature map tensor for each feature level in high to low resolution order.

        Returns:
            dict[str->Tensor]:
                mapping from feature map name to FPN feature map tensor
                in high to low resolution order. Returned feature names follow the FPN
                paper convention: "p<stage>", where stage has stride = 2 ** stage e.g.,
                ["p2", "p3", ..., "p6"].
        """
        # Reverse feature maps into top-down order (from low to high resolution)
        bottom_up_features = self.bottom_up(x)
        x = [bottom_up_features[f] for f in self.in_features[::-1]]
        results = [[] for _ in range(len(self.stages))]
        num_layers = len(self.stages)
        hidden_states = {}
        lateral_activities = {}
        if self.grad_method == 'cbp' or self.grad_method == 'rbp':
            results, penalty = self.neumann(
                x=x,
                num_layers=num_layers,
                hidden_states=hidden_states,
                lateral_activities=lateral_activities,
                results=results)
        elif self.grad_method == 'bptt':
            results = self.bptt(
                x=x,
                num_layers=num_layers,
                hidden_states=hidden_states,
                lateral_activities=lateral_activities,
                results=results)

        # Finish up
        if self.top_block is not None:
            top_block_in_feature = bottom_up_features.get(
                self.top_block.in_feature, None)
            if top_block_in_feature is None:
                top_block_in_feature = results[
                    self._out_features.index(self.top_block.in_feature)]
            results.extend(self.top_block(top_block_in_feature))
        assert len(self._out_features) == len(results)

        out_dict = dict(zip(self._out_features, results))
        if self.grad_method == 'cbp':
            out_dict['penalty'] = penalty
        return out_dict

    def neumann(self, x, num_layers, hidden_states, lateral_activities, results):
        """Run neumann RBP."""

        # Now move through remaining layers (with feedback)
        with torch.no_grad():
            for n in range(self.timesteps - 1):
                for layer_idx, (
                        features,
                        lateral_conv,
                        output_conv,
                        h_name,
                        stage,
                        td_conv,
                        td_map) in enumerate(
                            zip(
                                x,
                                self.lateral_convs,
                                self.output_convs,
                                self.horizontal_names,
                                self.stages,
                                self.td_convs,
                                self.td_mapping)):
                    # FF connections -- only compute once
                    stage = "fpn_lateral{}".format(stage)
                    if n == 0:
                        with torch.enable_grad():
                            lateral_features = lateral_conv(features)
                        lateral_activities[stage] = lateral_features
                    else:
                        lateral_features = lateral_activities[stage]

                    # Horizontal connections
                    if n == 0:
                        hidden_states[stage] = torch.zeros_like(lateral_features)  # noqa
                        # hidden_states[stage] = F.softplus(lateral_features)
                    recurrent_features = output_conv(
                        input_=lateral_features,
                        h_=hidden_states[stage])
                    hidden_states[stage] = recurrent_features

        # Detatch and require_grads for each of the hidden_states
        #print('hidden', [v.mean().item() for v in hidden_states.values()])
        prev_states = {}
        for k, v in hidden_states.items():
            if not v.requires_grad:
                v = v.clone().detach().requires_grad_()
            prev_states[k] = v

        for layer_idx, (
                features,
                lateral_conv,
                output_conv,
                h_name,
                stage,
                td_conv,
                td_map) in enumerate(
                    zip(
                        x,
                        self.lateral_convs,
                        self.output_convs,
                        self.horizontal_names,
                        self.stages,
                        self.td_convs,
                        self.td_mapping)):
            # FF connections -- only compute once
            stage = "fpn_lateral{}".format(stage)
            lateral_features = lateral_activities[stage]

            # Horizontal connections
            recurrent_features = output_conv(
                input_=lateral_features,
                h_=prev_states[stage])
            hidden_states[stage] = recurrent_features

        # Compute jacobians from top-to-bottom
        penalty = 0.
        # print('hidden2', [v.mean().item() for v in hidden_states.values()])
        # print('prev2', [v.mean().item() for v in prev_states.values()])
        # print('\n')
        #import pdb; pdb.set_trace()
        for layer_idx, stage in enumerate(self.stages[1:]):
            corrected_idx = stage - 2
            stage_name = 'fpn_lateral{}'.format(stage)
            prev_state = prev_states[stage_name]
            last_state = hidden_states[stage_name]
            internal_state = RBPFun.apply(
                prev_state,
                last_state,
                0,
                0,
                stage_name,
                self.neumann_iterations)
            results[corrected_idx] = internal_state
            if self.memory_mode:
                raise NotImplementedError(
                    'Need one more Top-Down pass here.')

            # Accrue the penalities
            #import pdb; pdb.set_trace()
            penalty = penalty + CBP_penalty(
                last_state=last_state,
                prev_state=prev_state,
                compute_hessian=(self.grad_method == 'cbp'))

        # One last pass for Output convs/TDs
        for layer_idx, (
                features,
                lateral_conv,
                output_conv,
                h_name,
                stage,
                td_conv,
                td_map) in enumerate(
                    zip(
                        x,
                        self.lateral_convs,
                        self.output_convs,
                        self.horizontal_names,
                        self.stages,
                        self.td_convs,
                        self.td_mapping)):

            # FF connections -- only compute once
            stage = "fpn_lateral{}".format(stage)
            lateral_features = lateral_activities[stage]

            # Replace their TD with ours
            # Gather activity from one layer above
            if layer_idx > 0:
                higher_name = 'fpn_lateral{}'.format(
                    self.stages[layer_idx - 1])
                # higher_activity = hidden_states[higher_name]
                higher_activity = lateral_activities[higher_name]
                prev_features = td_conv(
                    lower_=recurrent_features,
                    higher_=higher_activity)
                if not self.memory_mode:
                    hidden_states[stage] = prev_features
                results[layer_idx] = prev_features
                #print('TD {} -> {}'.format(higher_name, stage))
            else:
                results[layer_idx] = td_conv(recurrent_features)
        results = results[::-1]
        return results, penalty

    def bptt(self, x, num_layers, hidden_states, lateral_activities, results):
        """Run backprop through time."""
        # Now move through remaining layers (with feedback)
        for n in range(self.timesteps - 1):
            for layer_idx, (
                    features,
                    lateral_conv,
                    output_conv,
                    h_name,
                    stage,
                    td_conv,
                    td_map) in enumerate(
                        zip(
                            x,
                            self.lateral_convs,
                            self.output_convs,
                            self.horizontal_names,
                            self.stages,
                            self.td_convs,
                            self.td_mapping)):
                # FF connections -- only compute once
                stage = "fpn_lateral{}".format(stage)
                if n == 0:
                    lateral_features = lateral_conv(features)
                    lateral_activities[stage] = lateral_features
                else:
                    lateral_features = lateral_activities[stage]

                # Horizontal connections
                if n == 0:
                    hidden_states[stage] = torch.zeros_like(lateral_features)  # noqa
                    # hidden_states[stage] = F.softplus(lateral_features)
                recurrent_features = output_conv(
                    input_=lateral_features,
                    h_=hidden_states[stage])
                hidden_states[stage] = recurrent_features

        for layer_idx, (
                features,
                lateral_conv,
                output_conv,
                h_name,
                stage,
                td_conv,
                td_map) in enumerate(
                    zip(
                        x,
                        self.lateral_convs,
                        self.output_convs,
                        self.horizontal_names,
                        self.stages,
                        self.td_convs,
                        self.td_mapping)):

            # FF connections -- only compute once
            stage = "fpn_lateral{}".format(stage)
            lateral_features = lateral_activities[stage]

            # Horizontal connections
            recurrent_features = output_conv(
                input_=lateral_features,
                h_=hidden_states[stage])
            hidden_states[stage] = recurrent_features

            # Replace their TD with ours
            # Gather activity from one layer above
            if layer_idx > 0:
                higher_name = 'fpn_lateral{}'.format(
                    self.stages[layer_idx - 1])
                # higher_activity = hidden_states[higher_name]
                higher_activity = lateral_activities[higher_name]
                prev_features = td_conv(
                    lower_=recurrent_features,
                    higher_=higher_activity)
                if not self.memory_mode:
                    hidden_states[stage] = prev_features
                results[layer_idx] = prev_features
                #print('TD {} -> {}'.format(higher_name, stage))
            else:
                results[layer_idx] = td_conv(recurrent_features)
        results = results[::-1]
        return results

    def output_shape(self):
        return {
            name: ShapeSpec(
                channels=self._out_feature_channels[name],
                stride=self._out_feature_strides[name]
            )
            for name in self._out_features
        }


class FPNGN(Backbone):
    """
    This module implements Feature Pyramid Network.
    It creates pyramid features built on top of some input feature maps.
    """

    def __init__(
            self,
            bottom_up,
            in_features,
            out_channels,
            norm="",
            gala=False,
            top_block=None,
            fuse_type="sum",
            grad_method='bptt',
            neumann_iterations=15,
            memory_mode=False,
            timesteps=3):
        """
        Args:
            bottom_up (Backbone): module representing the bottom up subnetwork.
                Must be a subclass of :class:`Backbone`. The multi-scale feature
                maps generated by the bottom up network, and listed in `in_features`,
                are used to generate FPN levels.
            in_features (list[str]): names of the input feature maps coming
                from the backbone to which FPN is attached. For example, if the
                backbone produces ["res2", "res3", "res4"], any *contiguous* sublist
                of these may be used; order must be from high to low resolution.
            out_channels (int): number of channels in the output feature maps.
            norm (str): the normalization to use.
            top_block (nn.Module or None): if provided, an extra operation will
                be performed on the output of the last (smallest resolution)
                FPN output, and the result will extend the result list. The top_block
                further downsamples the feature map. It must have an attribute
                "num_levels", meaning the number of extra FPN levels added by
                this block, and "in_feature", which is a string representing
                its input feature (e.g., p5).
            fuse_type (str): types for fusing the top down features and the lateral
                ones. It can be "sum" (default), which sums up element-wise; or "avg",
                which takes the element-wise mean of the two.
        """
        super(FPNGN, self).__init__()
        assert isinstance(bottom_up, Backbone)

        # Feature map strides and channels from
        # the bottom up network (e.g. ResNet)
        self.grad_method = grad_method.lower()
        self.timesteps = timesteps
        self.neumann_iterations = neumann_iterations
        self.gala = gala
        self.memory_mode = memory_mode
        input_shapes = bottom_up.output_shape()
        in_strides = [input_shapes[f].stride for f in in_features]
        in_channels = [input_shapes[f].channels for f in in_features]

        _assert_strides_are_log2_contiguous(in_strides)
        lateral_convs = []
        output_convs = []
        td_convs = []
        td_mapping = []
        horizontal_names = []
        stages = []

        use_bias = norm == ""
        for idx, it_in_channels in enumerate(in_channels):
            lateral_norm = get_norm(norm, out_channels)
            output_norm = get_norm(norm, out_channels)

            # Feedforward connections
            lateral_conv = Conv2d(
                it_in_channels,
                out_channels,
                kernel_size=1,
                bias=use_bias,
                norm=lateral_norm
            )
            weight_init.c2_xavier_fill(lateral_conv)
            if idx < (len(in_channels) - 1):
                # Horizontal connections
                output_conv = hConvGRUCell(
                    input_size=out_channels,
                    hidden_size=out_channels,
                    kernel_size=3,
                    batchnorm=True,
                    timesteps=timesteps,
                    gala=self.gala,
                    norm=norm,
                    grad_method=self.grad_method)
            else:
                # Because the last layer is handled specially
                output_conv = Conv2d(
                    out_channels,
                    out_channels,
                    kernel_size=3,
                    stride=1,
                    padding=1,
                    bias=use_bias,
                    norm=output_norm)
                weight_init.c2_xavier_fill(output_conv)
            stage = int(math.log2(in_strides[idx]))
            stages += [stage]
            self.add_module("fpn_lateral{}".format(stage), lateral_conv)
            self.add_module("fpn_output{}".format(stage), output_conv)
            lateral_convs.append(lateral_conv)
            output_convs.append(output_conv)
            horizontal_names.append("fpn_lateral{}".format(stage))

            # TD connections
            if idx > 0:
                # Treat idx as the higher layer. Mapping is high -> low.
                td_conv = tdConvGRUCell(
                    fan_in=out_channels,
                    td_fan_in=out_channels,
                    diff_fan_in=out_channels,
                    kernel_size=1,
                    batchnorm=True,
                    timesteps=timesteps,
                    norm=norm,
                    grad_method=self.grad_method)
                self.add_module("fpn_topdown{}".format(stage), td_conv)
                td_convs.append(td_conv)
                td_mapping += [[stage, int(math.log2(in_strides[idx - 1]))]]

        # Place convs into top-down order (from low to high resolution)
        # to make the top-down computation in forward clearer.
        self.lateral_convs = lateral_convs[::-1]
        self.output_convs = output_convs[::-1]
        self.td_convs = td_convs[::-1]
        self.horizontal_names = horizontal_names[::-1]
        self.td_mapping = td_mapping[::-1]
        self.stages = stages[::-1]
        self.top_block = top_block
        self.in_features = in_features
        self.bottom_up = bottom_up
        # Return feature names are "p<stage>", like ["p2", "p3", ..., "p6"]
        self._out_feature_strides = {
            "p{}".format(int(math.log2(s))): s for s in in_strides}
        # top block output feature maps.
        if self.top_block is not None:
            for s in range(stage, stage + self.top_block.num_levels):
                self._out_feature_strides["p{}".format(s + 1)] = 2 ** (s + 1)

        self._out_features = list(self._out_feature_strides.keys())
        self._out_feature_channels = {
            k: out_channels for k in self._out_features}
        self._size_divisibility = in_strides[-1]
        assert fuse_type in {"avg", "sum"}
        self._fuse_type = fuse_type

    @property
    def size_divisibility(self):
        return self._size_divisibility

    def forward(self, x):
        """
        Args:
            input (dict[str->Tensor]): mapping feature map name (e.g., "res5") to
                feature map tensor for each feature level in high to low resolution order.

        Returns:
            dict[str->Tensor]:
                mapping from feature map name to FPN feature map tensor
                in high to low resolution order. Returned feature names follow the FPN
                paper convention: "p<stage>", where stage has stride = 2 ** stage e.g.,
                ["p2", "p3", ..., "p6"].
        """
        # Reverse feature maps into top-down order (from low to high resolution)
        bottom_up_features = self.bottom_up(x)
        x = [bottom_up_features[f] for f in self.in_features[::-1]]
        results = [[] for _ in range(len(self.stages))]
        num_layers = len(self.stages)
        hidden_states = {}
        lateral_activities = {}

        # Run transformation on highest layer
        prev_features = self.lateral_convs[0](x[0])
        # if self.debug:
        #     results.insert(0, self.output_convs[0](prev_features))
        #else:
        results[-1] = self.output_convs[0](prev_features)  # noqa Eventually convert this to recurrent
        stage = "fpn_lateral{}".format(self.stages[0])
        hidden_states[stage] = prev_features

        if self.grad_method == 'cbp' or self.grad_method == 'rbp':
            results, penalty = self.neumann(
                x=x,
                num_layers=num_layers,
                hidden_states=hidden_states,
                lateral_activities=lateral_activities,
                results=results)
        elif self.grad_method == 'bptt':
            results = self.bptt(
                x=x,
                num_layers=num_layers,
                hidden_states=hidden_states,
                lateral_activities=lateral_activities,
                results=results)

        # Finish up
        if self.top_block is not None:
            top_block_in_feature = bottom_up_features.get(
                self.top_block.in_feature, None)
            if top_block_in_feature is None:
                top_block_in_feature = results[
                    self._out_features.index(self.top_block.in_feature)]
            results.extend(self.top_block(top_block_in_feature))
        assert len(self._out_features) == len(results)

        out_dict = dict(zip(self._out_features, results))
        if self.grad_method == 'cbp':
            out_dict['penalty'] = penalty
        return out_dict

    def neumann(self, x, num_layers, hidden_states, lateral_activities, results):
        """Run neumann RBP."""

        # Now move through remaining layers (with feedback)
        with torch.no_grad():
            for n in range(self.timesteps - 1):
                #print('hidden', n, [v.mean().item() for v in hidden_states.values()])
                for layer_idx, (
                        features,
                        lateral_conv,
                        output_conv,
                        h_name,
                        stage,
                        td_conv,
                        td_map) in enumerate(
                            zip(
                                x[1:],
                                self.lateral_convs[1:],
                                self.output_convs[1:],
                                self.horizontal_names[1:],
                                self.stages[1:],
                                self.td_convs,
                                self.td_mapping)):

                    # FF connections -- only compute once
                    stage = "fpn_lateral{}".format(stage)
                    if n == 0:
                        with torch.enable_grad():
                            lateral_features = lateral_conv(features)
                        lateral_activities[stage] = lateral_features
                    else:
                        lateral_features = lateral_activities[stage]

                    # Horizontal connections
                    if n == 0:
                        hidden_states[stage] = torch.zeros_like(lateral_features)  # noqa
                        # hidden_states[stage] = F.softplus(lateral_features)
                    lateral_features = output_conv(
                        input_=lateral_features,
                        h_=hidden_states[stage])
                    hidden_states[stage] = lateral_features

                    # Replace their TD with ours
                    # Gather activity from one layer above
                    higher_name = 'fpn_lateral{}'.format(
                        self.stages[layer_idx])
                    higher_activity = hidden_states[higher_name]
                    prev_features = td_conv(
                        lower_=lateral_features,
                        higher_=higher_activity)
                    hidden_states[stage] = prev_features
                    # TODO: Add top-block below to recurrent loop

        # Detatch and require_grads for each of the hidden_states
        #print('hidden', [v.mean().item() for v in hidden_states.values()])
        prev_states = {}
        for k, v in hidden_states.items():
            if not v.requires_grad:
                v = v.clone().detach().requires_grad_()
            prev_states[k] = v
        #print('prev', [v.mean().item() for v in prev_states.values()])
        
        # Compute last timestep and update hidden_states again
        for layer_idx, (
                features,
                lateral_conv,
                output_conv,
                h_name,
                stage,
                td_conv,
                td_map) in enumerate(
                    zip(
                        x[1:],
                        self.lateral_convs[1:],
                        self.output_convs[1:],
                        self.horizontal_names[1:],
                        self.stages[1:],
                        self.td_convs,
                        self.td_mapping)):

            # FF connections -- only compute once
            corrected_idx = stage - 2
            stage = "fpn_lateral{}".format(stage)
            lateral_features = lateral_activities[stage]

            # Horizontal connections
            lateral_features = output_conv(
                input_=lateral_features,
                h_=prev_states[stage])
            hidden_states[stage] = lateral_features

            # Replace their TD with ours
            # Gather activity from one layer above
            higher_name = 'fpn_lateral{}'.format(
                self.stages[layer_idx])
            # print(stage, higher_name)
            higher_activity = hidden_states[higher_name]
            prev_features = td_conv(
                lower_=lateral_features,
                higher_=higher_activity)

            if not self.memory_mode:
                hidden_states[stage] = prev_features

        # Compute jacobians from top-to-bottom
        penalty = 0.
        # print('hidden2', [v.mean().item() for v in hidden_states.values()])
        # print('prev2', [v.mean().item() for v in prev_states.values()])
        # print('\n')
        #import pdb; pdb.set_trace()
        for layer_idx, stage in enumerate(self.stages[1:]):
            corrected_idx = stage - 2
            stage_name = 'fpn_lateral{}'.format(stage)
            prev_state = prev_states[stage_name]
            last_state = hidden_states[stage_name]
            internal_state = RBPFun.apply(
                prev_state,
                last_state,
                0,
                0,
                stage_name,
                self.neumann_iterations)
            results[corrected_idx] = internal_state
            if self.memory_mode:
                raise NotImplementedError(
                    'Need one more Top-Down pass here.')

            # Accrue the penalities
            #import pdb; pdb.set_trace()
            penalty = penalty + CBP_penalty(
                last_state=last_state,
                prev_state=prev_state,
                compute_hessian=(self.grad_method == 'cbp'))
        return results, penalty

    def bptt(self, x, num_layers, hidden_states, lateral_activities, results):
        """Run backprop through time."""
        # Now move through remaining layers (with feedback)
        for n in range(self.timesteps):
            for layer_idx, (
                    features,
                    lateral_conv,
                    output_conv,
                    h_name,
                    stage,
                    td_conv,
                    td_map) in enumerate(
                        zip(
                            x[1:],
                            self.lateral_convs[1:],
                            self.output_convs[1:],
                            self.horizontal_names[1:],
                            self.stages[1:],
                            self.td_convs,
                            self.td_mapping)):
                corrected_idx = num_layers - layer_idx - 2

                # FF connections -- only compute once
                stage = "fpn_lateral{}".format(stage)
                if n == 0:
                    lateral_features = lateral_conv(features)
                    lateral_activities[stage] = lateral_features
                else:
                    lateral_features = lateral_activities[stage]

                # Horizontal connections
                if n == 0:
                    hidden_states[stage] = torch.zeros_like(lateral_features)  # noqa
                    # hidden_states[stage] = F.softplus(lateral_features)
                lateral_features = output_conv(
                    input_=lateral_features,
                    h_=hidden_states[stage])
                hidden_states[stage] = lateral_features

                # Replace their TD with ours
                # Gather activity from one layer above
                higher_name = 'fpn_lateral{}'.format(
                    self.stages[layer_idx])
                higher_activity = hidden_states[higher_name]
                prev_features = td_conv(
                    lower_=lateral_features,
                    higher_=higher_activity)
                if not self.memory_mode:
                    hidden_states[stage] = prev_features
                results[corrected_idx] = prev_features
                # TODO: Add top-block below to recurrent loop
        return results

    def output_shape(self):
        return {
            name: ShapeSpec(
                channels=self._out_feature_channels[name],
                stride=self._out_feature_strides[name]
            )
            for name in self._out_features
        }


class FPN(Backbone):
    """
    This module implements Feature Pyramid Network.
    It creates pyramid features built on top of some input feature maps.
    """

    def __init__(
        self,
        bottom_up,
        in_features,
        out_channels,
        norm="",
        top_block=None,
        fuse_type="sum"
    ):
        """
        Args:
            bottom_up (Backbone): module representing the bottom up subnetwork.
                Must be a subclass of :class:`Backbone`. The multi-scale feature
                maps generated by the bottom up network, and listed in `in_features`,
                are used to generate FPN levels.
            in_features (list[str]): names of the input feature maps coming
                from the backbone to which FPN is attached. For example, if the
                backbone produces ["res2", "res3", "res4"], any *contiguous* sublist
                of these may be used; order must be from high to low resolution.
            out_channels (int): number of channels in the output feature maps.
            norm (str): the normalization to use.
            top_block (nn.Module or None): if provided, an extra operation will
                be performed on the output of the last (smallest resolution)
                FPN output, and the result will extend the result list. The top_block
                further downsamples the feature map. It must have an attribute
                "num_levels", meaning the number of extra FPN levels added by
                this block, and "in_feature", which is a string representing
                its input feature (e.g., p5).
            fuse_type (str): types for fusing the top down features and the lateral
                ones. It can be "sum" (default), which sums up element-wise; or "avg",
                which takes the element-wise mean of the two.
        """
        super(FPN, self).__init__()
        assert isinstance(bottom_up, Backbone)

        # Feature map strides and channels from the bottom up network (e.g. ResNet)
        input_shapes = bottom_up.output_shape()
        in_strides = [input_shapes[f].stride for f in in_features]
        in_channels = [input_shapes[f].channels for f in in_features]

        _assert_strides_are_log2_contiguous(in_strides)
        lateral_convs = []
        output_convs = []

        use_bias = norm == ""
        for idx, it_in_channels in enumerate(in_channels):
            lateral_norm = get_norm(norm, out_channels)
            output_norm = get_norm(norm, out_channels)

            lateral_conv = Conv2d(
                it_in_channels, out_channels, kernel_size=1, bias=use_bias, norm=lateral_norm
            )
            output_conv = Conv2d(
                out_channels,
                out_channels,
                kernel_size=3,
                stride=1,
                padding=1,
                bias=use_bias,
                norm=output_norm,
            )
            weight_init.c2_xavier_fill(lateral_conv)
            weight_init.c2_xavier_fill(output_conv)
            stage = int(math.log2(in_strides[idx]))
            self.add_module("fpn_lateral{}".format(stage), lateral_conv)
            self.add_module("fpn_output{}".format(stage), output_conv)

            lateral_convs.append(lateral_conv)
            output_convs.append(output_conv)
        # Place convs into top-down order (from low to high resolution)
        # to make the top-down computation in forward clearer.
        self.lateral_convs = lateral_convs[::-1]
        self.output_convs = output_convs[::-1]
        self.top_block = top_block
        self.in_features = in_features
        self.bottom_up = bottom_up
        # Return feature names are "p<stage>", like ["p2", "p3", ..., "p6"]
        self._out_feature_strides = {"p{}".format(int(math.log2(s))): s for s in in_strides}
        # top block output feature maps.
        if self.top_block is not None:
            for s in range(stage, stage + self.top_block.num_levels):
                self._out_feature_strides["p{}".format(s + 1)] = 2 ** (s + 1)

        self._out_features = list(self._out_feature_strides.keys())
        self._out_feature_channels = {k: out_channels for k in self._out_features}
        self._size_divisibility = in_strides[-1]
        assert fuse_type in {"avg", "sum"}
        self._fuse_type = fuse_type

    @property
    def size_divisibility(self):
        return self._size_divisibility

    def forward(self, x):
        """
        Args:
            input (dict[str->Tensor]): mapping feature map name (e.g., "res5") to
                feature map tensor for each feature level in high to low resolution order.

        Returns:
            dict[str->Tensor]:
                mapping from feature map name to FPN feature map tensor
                in high to low resolution order. Returned feature names follow the FPN
                paper convention: "p<stage>", where stage has stride = 2 ** stage e.g.,
                ["p2", "p3", ..., "p6"].
        """
        # Reverse feature maps into top-down order (from low to high resolution)
        bottom_up_features = self.bottom_up(x)
        x = [bottom_up_features[f] for f in self.in_features[::-1]]
        results = []
        prev_features = self.lateral_convs[0](x[0])
        results.append(self.output_convs[0](prev_features))
        for features, lateral_conv, output_conv in zip(
            x[1:], self.lateral_convs[1:], self.output_convs[1:]
        ):
            top_down_features = F.interpolate(prev_features, scale_factor=2, mode="nearest")
            lateral_features = lateral_conv(features)
            prev_features = lateral_features + top_down_features
            if self._fuse_type == "avg":
                prev_features /= 2
            results.insert(0, output_conv(prev_features))

        if self.top_block is not None:
            top_block_in_feature = bottom_up_features.get(self.top_block.in_feature, None)
            if top_block_in_feature is None:
                top_block_in_feature = results[self._out_features.index(self.top_block.in_feature)]
            results.extend(self.top_block(top_block_in_feature))
        assert len(self._out_features) == len(results)
        return dict(zip(self._out_features, results))

    def output_shape(self):
        return {
            name: ShapeSpec(
                channels=self._out_feature_channels[name], stride=self._out_feature_strides[name]
            )
            for name in self._out_features
        }


def _assert_strides_are_log2_contiguous(strides):
    """
    Assert that each stride is 2x times its preceding stride, i.e. "contiguous in log2".
    """
    for i, stride in enumerate(strides[1:], 1):
        assert stride == 2 * strides[i - 1], "Strides {} {} are not log2 contiguous".format(
            stride, strides[i - 1]
        )


class LastLevelMaxPool(nn.Module):
    """
    This module is used in the original FPN to generate a downsampled
    P6 feature from P5.
    """

    def __init__(self):
        super().__init__()
        self.num_levels = 1
        self.in_feature = "p5"

    def forward(self, x):
        return [F.max_pool2d(x, kernel_size=1, stride=2, padding=0)]


class LastLevelP6P7(nn.Module):
    """
    This module is used in RetinaNet to generate extra layers, P6 and P7 from
    C5 feature.
    """

    def __init__(self, in_channels, out_channels):
        super().__init__()
        self.num_levels = 2
        self.in_feature = "res5"
        self.p6 = nn.Conv2d(in_channels, out_channels, 3, 2, 1)
        self.p7 = nn.Conv2d(out_channels, out_channels, 3, 2, 1)
        for module in [self.p6, self.p7]:
            weight_init.c2_xavier_fill(module)

    def forward(self, c5):
        p6 = self.p6(c5)
        p7 = self.p7(F.relu(p6))
        return [p6, p7]


class LastLevelP6P7GN(nn.Module):
    """
    This module is used in RetinaNet to generate extra layers, P6 and P7 from
    C5 feature.
    """

    def __init__(self, in_channels, out_channels):
        super().__init__()
        self.num_levels = 2
        self.in_feature = "res5"
        self.p6 = nn.Conv2d(in_channels, out_channels, 3, 2, 1)
        self.p7 = nn.Conv2d(out_channels, out_channels, 3, 2, 1)
        for module in [self.p6, self.p7]:
            weight_init.c2_xavier_fill(module)

    def forward(self, c5):
        p6 = self.p6(c5)
        p7 = self.p7(F.softplus(p6))
        return [p6, p7]


@BACKBONE_REGISTRY.register()
def build_resnet_fpngn_backbone(cfg, input_shape: ShapeSpec):
    """
    Args:
        cfg: a detectron2 CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up = build_resnet_backbone(cfg, input_shape)
    in_features = cfg.MODEL.FPN.IN_FEATURES
    out_channels = cfg.MODEL.FPN.OUT_CHANNELS
    backbone = FPNGN(
        bottom_up=bottom_up,
        in_features=in_features,
        out_channels=out_channels,
        norm=cfg.MODEL.FPN.NORM,
        top_block=LastLevelMaxPool(),
        fuse_type=cfg.MODEL.FPN.FUSE_TYPE,
    )
    return backbone


@BACKBONE_REGISTRY.register()
def build_resnet_fpnindi_backbone(cfg, input_shape: ShapeSpec):
    """
    Args:
        cfg: a detectron2 CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up = build_resnet_backbone(cfg, input_shape)
    in_features = cfg.MODEL.FPN.IN_FEATURES
    out_channels = cfg.MODEL.FPN.OUT_CHANNELS
    backbone = FPNINDI(
        bottom_up=bottom_up,
        in_features=in_features,
        out_channels=out_channels,
        norm=cfg.MODEL.FPN.NORM,
        top_block=LastLevelMaxPool(),
        fuse_type=cfg.MODEL.FPN.FUSE_TYPE,
    )
    return backbone


@BACKBONE_REGISTRY.register()
def build_resnet_fpngn_gala_backbone(cfg, input_shape: ShapeSpec):
    """
    Args:
        cfg: a detectron2 CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up = build_resnet_backbone(cfg, input_shape)
    in_features = cfg.MODEL.FPN.IN_FEATURES
    out_channels = cfg.MODEL.FPN.OUT_CHANNELS
    backbone = FPNGN(
        bottom_up=bottom_up,
        in_features=in_features,
        out_channels=out_channels,
        norm=cfg.MODEL.FPN.NORM,
        gala=True,
        top_block=LastLevelMaxPool(),
        fuse_type=cfg.MODEL.FPN.FUSE_TYPE,
    )
    return backbone


@BACKBONE_REGISTRY.register()
def build_resnet_fpngn_cbp10_backbone(cfg, input_shape: ShapeSpec):
    """
    Args:
        cfg: a detectron2 CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up = build_resnet_backbone(cfg, input_shape)
    in_features = cfg.MODEL.FPN.IN_FEATURES
    out_channels = cfg.MODEL.FPN.OUT_CHANNELS
    backbone = FPNGN(
        bottom_up=bottom_up,
        in_features=in_features,
        out_channels=out_channels,
        norm=cfg.MODEL.FPN.NORM,
        gala=False,
        grad_method='cbp',
        timesteps=10,
        top_block=LastLevelMaxPool(),
        fuse_type=cfg.MODEL.FPN.FUSE_TYPE,
    )
    return backbone


@BACKBONE_REGISTRY.register()
def build_resnet_fpn_backbone(cfg, input_shape: ShapeSpec):
    """
    Args:
        cfg: a detectron2 CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up = build_resnet_backbone(cfg, input_shape)
    in_features = cfg.MODEL.FPN.IN_FEATURES
    out_channels = cfg.MODEL.FPN.OUT_CHANNELS
    backbone = FPN(
        bottom_up=bottom_up,
        in_features=in_features,
        out_channels=out_channels,
        norm=cfg.MODEL.FPN.NORM,
        top_block=LastLevelMaxPool(),
        fuse_type=cfg.MODEL.FPN.FUSE_TYPE,
    )
    return backbone


@BACKBONE_REGISTRY.register()
def build_resnet_fpn_gn_backbone(cfg, input_shape: ShapeSpec):
    """
    Args:
        cfg: a detectron2 CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up = build_resnet_gn_backbone(cfg, input_shape)
    in_features = cfg.MODEL.FPN.IN_FEATURES
    out_channels = cfg.MODEL.FPN.OUT_CHANNELS
    backbone = FPN(
        bottom_up=bottom_up,
        in_features=in_features,
        out_channels=out_channels,
        norm=cfg.MODEL.FPN.NORM,
        top_block=LastLevelMaxPool(),
        fuse_type=cfg.MODEL.FPN.FUSE_TYPE,
    )
    return backbone


@BACKBONE_REGISTRY.register()
def build_resnet_fpn_gnbn_lowlevel_backbone(cfg, input_shape: ShapeSpec):
    """
    Args:
        cfg: a detectron2 CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up = build_resnet_gnbn_lowlevel_backbone(cfg, input_shape)
    in_features = cfg.MODEL.FPN.IN_FEATURES
    out_channels = cfg.MODEL.FPN.OUT_CHANNELS
    backbone = FPN(
        bottom_up=bottom_up,
        in_features=in_features,
        out_channels=out_channels,
        norm=cfg.MODEL.FPN.NORM,
        top_block=LastLevelMaxPool(),
        fuse_type=cfg.MODEL.FPN.FUSE_TYPE,
    )
    return backbone


@BACKBONE_REGISTRY.register()
def build_resnet_fpn_gnbn_backbone(cfg, input_shape: ShapeSpec):
    """
    Args:
        cfg: a detectron2 CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up = build_resnet_gnbn_backbone(cfg, input_shape)
    in_features = cfg.MODEL.FPN.IN_FEATURES
    out_channels = cfg.MODEL.FPN.OUT_CHANNELS
    backbone = FPN(
        bottom_up=bottom_up,
        in_features=in_features,
        out_channels=out_channels,
        norm=cfg.MODEL.FPN.NORM,
        top_block=LastLevelMaxPool(),
        fuse_type=cfg.MODEL.FPN.FUSE_TYPE,
    )
    return backbone


@BACKBONE_REGISTRY.register()
def build_retinanet_resnet_fpn_backbone(cfg, input_shape: ShapeSpec):
    """
    Args:
        cfg: a detectron2 CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up = build_resnet_backbone(cfg, input_shape)
    in_features = cfg.MODEL.FPN.IN_FEATURES
    out_channels = cfg.MODEL.FPN.OUT_CHANNELS
    in_channels_p6p7 = bottom_up.output_shape()["res5"].channels
    backbone = FPN(
        bottom_up=bottom_up,
        in_features=in_features,
        out_channels=out_channels,
        norm=cfg.MODEL.FPN.NORM,
        top_block=LastLevelP6P7(in_channels_p6p7, out_channels),
        fuse_type=cfg.MODEL.FPN.FUSE_TYPE,
    )
    return backbone


@BACKBONE_REGISTRY.register()
def build_retinanet_resnet_fpngn_backbone(cfg, input_shape: ShapeSpec):
    """
    Args:
        cfg: a detectron2 CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up = build_resnet_backbone(cfg, input_shape)
    in_features = cfg.MODEL.FPN.IN_FEATURES
    out_channels = cfg.MODEL.FPN.OUT_CHANNELS
    in_channels_p6p7 = bottom_up.output_shape()["res5"].channels
    backbone = FPNGN(
        bottom_up=bottom_up,
        in_features=in_features,
        out_channels=out_channels,
        norm=cfg.MODEL.FPN.NORM,
        top_block=LastLevelP6P7GN(in_channels_p6p7, out_channels),
        fuse_type=cfg.MODEL.FPN.FUSE_TYPE,
    )
    return backbone
